# -*- coding: utf-8 -*-
"""dataset_proveedor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z3_OlmMTF0bUiDiB9XaQ57-BA7wYqWR6

# Conjunto de datos para la entidad "Proveedor"
"""

# Uso del Pip install para poder importar la librería faker
!pip install faker

# Importar librería pandas para manejar y analizar datos
import pandas as pd
# Importar librería uuid para crear identificadores únicos.
import uuid
# Importar librería random para generar datos aleatorios.
import random
# Importar el paquete faker para generar datos fasos.
from faker import Faker

# Delimitación del rango del número de elementos.
num_proveedor = 5000

# Una lista de 7 características para la entidad proveedor
features = [
    "var_id_pro",
    "var_nombre_pro",
    "var_tipo_pro",
    "var_email_pro",
    "var_telefono_pro",
    "var_descripcion_pro",
    "var_status_pro"
]
# Creación de un DF para estas características
df = pd.DataFrame(columns=features)

def idm_gen(n):
    """
    Función que se encarga de crear un id unico con nomenclatura básica
    ...
    
    Parametros
    ----------
    n : int
        representa el numero de indice correspondiente al registro
    
    Return
    ------
    "MSL--"+str(n+1) : str
        nomenclatura única de identificación del proveedor correspondiente
    """
    return "PRO "+str(n+1)

df['var_id_pro'] = [idm_gen(i) for i in range(num_proveedor)]

# Tipo de Proveedor
tipo_pro = ["Electronics",
            "Chemistry",
            "na"]

df['var_tipo_pro'] = random.choices(
    tipo_pro, 
    weights=(35,35,30), 
    k=num_proveedor
)
"""
Con la lista generada de las opciones de tipos de proveedor, se proporciona la
función de opciones pesos para cada función y la cantidad de opciones hacer representadas
por "k". Por consiguiente, se asignó al atributo de "tipo_pro" del marco de datos.
"""

# Nombre del Proveedor
# Creación de instancias de falsificador
faker = Faker()

def name_gen(guy):
    """
    Genera rápidamente un nombre del proveedor
    """
    faker.company()
    
    return faker.company()
    
# Generación de nombres para cada proveedor
df['var_nombre_pro'] = ['Company '+name_gen(i) for i in df['var_nombre_pro']]

# Email del proveedor
def emailGen(name, duplicateFound=False):
    """
    Genera una dirección de correo electrónico aleatoria basada en el nombre dado. 
    Agrega un número al final si se encontró una dirección duplicada.
    """
    # Nombre de dominio falso para usar
    dom = "@pymes.com"
    
    # Mayúsculas y minúsculas
    name = name.lower().split(" ")
    
    # Carácter aleatorio para insertar en el nombre
    chars = [".", "_"]
    
    new_name = name[0] + random.choice(chars) + name[1] 
    
    # Distinguir aún más el correo electrónico si se encontró un duplicado
    if duplicateFound:
        
        # Número aleatorio para insertar al final
        num = random.randint(0,100)
        
        # Insertar al final
        new_name = new_name + str(num)
        
    # Devolver la dirección de correo electrónico con el nombre de dominio adjunto
    return new_name + dom

emails = []

for name in df['var_nombre_pro']:
    
    # Generación del correo electrónico
    email = emailGen(name)
    
    # Bucle hasta que se genere un correo electrónico único
    while email in emails:
        
        # Crear un correo electrónico con un número aleatorio
        email = emailGen(name, duplicateFound=True)
    
    # Adjuntar el nuevo correo electrónico a la lista
    emails.append(email)
    
df['var_email_pro'] = emails

# Número de Teléfono del proveedor
# import module
import random as r
from random import seed
from datetime import datetime
num=[]
size = 10

for i in range(0, num_proveedor):
  random.seed(datetime.now())
  valores = [0,1,2,3,4,5,6,7,8,9]
  num=(''.join([str(random.choice(valores)) for i in range(size)]))
  df.var_telefono_pro[i]=num

# Descripción del proveedor
import string
import random
bio=[]
length_of_string = 20
for i in range(0, num_proveedor):
  random.seed(datetime.now())
  bio=(''.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for i in range(length_of_string)))
  df.var_descripcion_pro[i] =bio

# Estado del proveedor
Status_pro = ["Activo", "Inactivo"]

df['var_status_pro']= random.choices(
    Status_pro, 
    weights=(45,55), 
    k=num_proveedor
)
"""
Con la lista generada de las opciones de estados, se proporciona la
función de opciones pesos para cada función y la cantidad de opciones hacer representadas
por "k". Por consiguiente, se asignó al atributo de "Status_pro" del marco de datos.
"""

# Guardar el conjunto de datos
df.to_csv('dataset_proveedor.csv')

pd.read_csv('dataset_proveedor.csv', index_col=0)