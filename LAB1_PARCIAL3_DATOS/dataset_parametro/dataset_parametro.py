# -*- coding: utf-8 -*-
"""dataset_parametro.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IE758nZkTK8k4sEA5qn7mp_1gG5Tu0w4
"""

# Uso del Pip install para poder importar la librería faker
!pip install faker

# Importar librería pandas para manejar y analizar datos
import pandas as pd
# Importar librería uuid para crear identificadores únicos.
import uuid
# Importar librería random para generar datos aleatorios.
import random
# Importar el paquete faker para generar datos fasos.
from faker import Faker

# Delimitación del rango del número de elementos.
num_parametro = 5000

# Una lista de 3 características de la entidad parametro
features = [
    "var_id_par",
    "var_descripcion_par",
    "var_decreto_par",
    "var_status_par"
]
# Creación de un DF para estas características
df = pd.DataFrame(columns=features)

# Generar identificadores para cada parametro
def idm_gen(n):
    """
    Función que se encarga de crear un id unico con nomenclatura básica
    ...
    
    Parametros
    ----------
    n : int
        representa el numero de indice correspondiente al registro
    
    Return
    ------
    "MSL--"+str(n+1) : str
        nomenclatura única de identificación del parametro correspondiente
    """
    return "PRMT "+str(n+1)

df['var_id_par'] = [idm_gen(i) for i in range(num_parametro)]

# Decreto del parametro
Decreto_par = ["Ley DoD", "Ley Nasa"]

df['var_decreto_par'] = random.choices(
    Decreto_par, 
    weights=(45,55), 
    k=num_parametro
)
"""
Con la lista generada de las opciones de decreto_par, se proporciona la función de opciones
pesos para cada función y la cantidad de opciones hacer representadas por "k".
Por consiguiente, se asignó al atributo de "decreto_par" del marco de datos.
"""

# Descripción del proveedor
import string
import random
bio=[]
length_of_string = 20
random.seed()
for i in range(0, num_parametro):
  bio=(''.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for i in range(length_of_string)))
  df.var_descripcion_par[i] =bio

#Arreglo con estados del parametro
status = [
    "Activo",
    "Inactivo"
]

# Determinar un estado para cada rol
def Status_par():
    """
    Función que toma un estado de forma aleatoria
    ...
    
    Return
    ------
    random.choice(status) : str
        seleccion de estados usando metodo choice de la libreria random
    """
    return random.choice(status)

df['var_status_par'] = [Status_par() for i in range(num_parametro)]

# Guardar el conjunto de datos
df.to_csv('dataset_parametro.csv')

# Mostrar el conjunto de datos
pd.read_csv('dataset_parametro.csv', index_col=0)