# -*- coding: utf-8 -*-
"""dataset_departamento.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GrC3kENwm99mievNIKRid0TUiiU6L1y7

# Conjunto de datos para la entidad "Departamentos"
"""

# Uso del Pip install para poder importar la librería faker
!pip install faker

# Importar librería pandas para manejar y analizar datos
import pandas as pd
# Importar librería uuid para crear identificadores únicos.
import uuid
# Importar librería random para generar datos aleatorios.
import random
# Importar el paquete faker para generar datos fasos.
from faker import Faker

# Delimitación del rango del número de elementos.
num_departamento = 5000

# Una lista de 4 características de la entidad departamento
features = [
    "var_id_dept",
    "var_nombre_dept",
    "var_tipo_dept",
    "var_descripcion_dept",
    "var_status_dept"
]
# Creación de un DF para estas características
df = pd.DataFrame(columns=features)

# Generar un id para cada departamento
def idm_gen(n):
    """
    Función que se encarga de crear un id unico con nomenclatura básica
    ...
    
    Parametros
    ----------
    n : int
        representa el numero de indice correspondiente al registro
    
    Return
    ------
    "DPTO "+str(n+1) : str
        nomenclatura única de identificación del departamento correspondiente
    """
    return "DPTO "+str(n+1)

df['var_id_dept'] = [idm_gen(i) for i in range(num_departamento)]

# Nombre de departamento
var_nombre_dept = ["Departamento de Propulsión",
                   "Departamento de Armamento",
                   "Departamento de Comunicación",
                   "Departamento de Crontrol",
                   "Departamento de Estructura",
                   "Departamento de Carga Explosiva",
                   "Departamento de Guía",
                   "Departamento de Administración"]

df['var_nombre_dept'] = random.choices(
    var_nombre_dept, 
    weights=(12,13,12,13,12,13,12,13), 
    k=num_departamento
)
"""
Con la lista generada de las opciones de nombres de departamento, se proporciona la
función de opciones pesos para cada función y la cantidad de opciones hacer representadas
por "k". Por consiguiente, se asignó al atributo de "var_nombre_dept" del marco de datos.
"""

# tipo de departamento
var_tipo_dept = ["DOD",
                 "Nasa"]

df['var_tipo_dept'] = random.choices(
    var_tipo_dept, 
    weights=(25,25), 
    k=num_departamento
)
"""
Con la lista generada de las opciones de tipos de departamento, se proporciona la
función de opciones pesos para cada función y la cantidad de opciones hacer representadas
por "k". Por consiguiente, se asignó al atributo de "var_tipo_dept" del marco de datos.
"""

# Descripción del proveedor
import string
import random
bio=[]
length_of_string = 20
random.seed()
for i in range(0, num_departamento):
  bio=(''.join(random.SystemRandom().choice(string.ascii_letters + string.digits) for i in range(length_of_string)))
  df.var_descripcion_dept[i] =bio

# Estado del departamento
Status_dept = ["Activo", "Inactivo"]

df['var_status_dept']= random.choices(
    Status_dept, 
    weights=(45,55), 
    k=num_departamento
)
"""
Con la lista generada de las opciones de estados, se proporciona la
función de opciones pesos para cada función y la cantidad de opciones hacer representadas
por "k". Por consiguiente, se asignó al atributo de "var_status_dept" del marco de datos.
"""

# Guardar el conjunto de datos
df.to_csv('dataset_departamento.csv')

# Mostrar el conjunto de datos
pd.read_csv('dataset_departamento.csv', index_col=0)