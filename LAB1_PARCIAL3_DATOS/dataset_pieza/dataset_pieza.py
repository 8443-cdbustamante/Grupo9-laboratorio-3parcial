# -*- coding: utf-8 -*-
"""dataset_pieza.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NIoKFcpO8kZeRsc21T5_xqhIVUaU-0Ur
"""

# Uso del Pip install para poder importar la librería faker
!pip install faker

# Importar librería pandas para manejar y analizar datos
import pandas as pd
# Importar librería uuid para crear identificadores únicos.
import uuid
# Importar librería random para generar datos aleatorios.
import random
# Importar el paquete faker para generar datos fasos.
from faker import Faker
# Importar la librería datetime para manejar fechas.
import datetime
from datetime import date

# Delimitación del rango del número de elementos.
num_pieza = 5000

#Instanciación faker
faker = Faker()

# Una lista de 5 características para la entidad pieza
atributos = [
    "var_id_pieza",
    "var_nombre_pieza",
    "var_tipo_pieza",
    "nbr_cantidad_pieza",
    "dt_fecha_fac_pieza",
    "var_status_pieza"  
]

# Nombres de Combustibles
nombre =[
    "combustible-A",
    "combustible-B",
    "combustible-C",
    "tornillo-A",
    "tornillo-B",
    "Plancha acero",
    "Plancha aluminio",
    "Plancha kevlar",
    "Tarjeta PCB",
    "Procesadores",
    "Panel solar",
    "Sensor-A",
    "Sensor-B",
    "Sensor-C",
    "Antena-A",
    "Antena-B"
    "OS-A",
    "OS-B",
    "system-A",
    "system-B"
]

# Tipo de combustibles
tipo = [
    "Quimico",
    "Mecanico",
    "Electronico",
    "Software"
]

# Creación de un DF para las 5 características de la entidad pieza
df = pd.DataFrame(columns = atributos)

# id para cada pieza
def id_gen(n):
    """
    Función para crear la id única
    ...
    Parametro
    n : int
        corresponde al numero indicador del registro correspondiente 
    
    Return
    ------
    "PZ-"+str(n+1) : str
        se crea las identificaciones únicas para las piezas
    """
    return "PZ "+str(n+1)

df['var_id_pieza'] = [id_gen(i) for i in range(num_pieza)]

# Nombre para pieza
def nombre_gen():
    """
    Función para asignación del nombre de la pieza
    ...
    
    Return
    ------
    "random.choice(nombre) : str
        De forma aleatoria, se asigna un nombre a la pieza
    """
    return random.choice(nombre)

df['var_nombre_pieza'] = [nombre_gen() for i in range(num_pieza)]

# Tipo de pieza
def tipo_gen(name):
    """
    Función que dá el tipo de pieza
    ...
    image.png
    Return
    ------
    random.choice(tipo): str
        Selección aleatoria de tipo de pieza
    """
    #obtencion del indice de nombre
    ind = nombre.index(name)
    if (ind >= 0 and ind <=2):
        return tipo[0]
    elif (ind >= 3 and ind <=7):
        return tipo[1]
    elif (ind >= 8 and ind <=15):
        return tipo[2]
    elif (ind >= 16 and ind <=19):
        return tipo[3]
    return "NA"

df['var_tipo_pieza'] = [tipo_gen(i) for i in df['var_nombre_pieza']]

# Cantidad de piezas
def cantidad_gen():
    """
    Función para crear la cantidad
    ...
   
    Return
    ------
   random.randint(40,100)) : int
        se crea un entero entre 1 a 100
    """
    return random.randint(40,100)

df['nbr_cantidad_pieza'] = [cantidad_gen() for i in range(num_pieza)]

# Gerar fecha de fabricacion para cada pieza
def fechFab_gen():
    """
    Función para crear fecha de fabricación
    ...
    
    Return
    ------
    faker.date_between('-3y') : obj datetime.date
        generación de una fecha entre 10 años antes hasta la fecha actual
    """
    return faker.date_between('-3y')

df['dt_fecha_fac_pieza'] = [fechFab_gen() for i in range(num_pieza)]

# Estado del departamento
Status_pieza = ["Disponible", "No disponible"]

df['var_status_pieza']= random.choices(
    Status_pieza, 
    weights=(45,55), 
    k=num_pieza
)
"""
Con la lista generada de las opciones de estados, se proporciona la
función de opciones pesos para cada función y la cantidad de opciones hacer representadas
por "k". Por consiguiente, se asignó al atributo de "var_status_dept" del marco de datos.
"""

# Guardar el conjunto de datos
df.to_csv('dataset_pieza.csv')

# Mostrar el conjunto de datos
pd.read_csv('dataset_pieza.csv', index_col=0)